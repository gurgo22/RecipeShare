@model IEnumerable<RecipeShare.Models.UserActivity>

@{
    ViewData["Title"] = "User Activity Analytics";
}

<div class="container mt-5">
    <h1 class="mb-4">User Activity Analytics</h1>

    <!-- Filters -->
    <div class="row mb-4">
        <div class="col-md-3">
            <label for="username-filter">Filter by Username</label>
            <input type="text" id="username-filter" class="form-control" placeholder="Enter username">
        </div>
        <div class="col-md-3">
            <label for="ip-filter">Filter by IP Address</label>
            <input type="text" id="ip-filter" class="form-control" placeholder="Enter IP address">
        </div>
        <div class="col-md-3">
            <label for="url-filter">Filter by URL</label>
            <input type="text" id="url-filter" class="form-control" placeholder="Enter URL">
        </div>
        <div class="col-md-3 d-flex align-items-end">
            <button class="btn btn-primary" onclick="applyFilters()">Apply Filters</button>
            <button class="btn btn-secondary ml-2" onclick="resetFilters()">Reset</button>
        </div>
    </div>

    <!-- Charts -->
    <div class="row mb-5">
        <div class="col-lg-6">
            <h4>Activity by URL</h4>
            <canvas id="urlActivityChart"></canvas>
        </div>
        <div class="col-lg-6">
            <h4>Activity by User</h4>
            <canvas id="userActivityChart"></canvas>
        </div>
    </div>

    <!-- Activity Table -->
    <div class="table-responsive">
        <table class="table table-bordered table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>#</th>
                    <th>Username</th>
                    <th>IP Address</th>
                    <th>URL</th>
                    <th>Data</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var activity in Model) {
                    <tr>
                        <td>@activity.Id</td>
                        <td>@activity.Username</td>
                        <td>@activity.IpAddress</td>
                        <td>@activity.Url</td>
                        <td>@activity.Data</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Dummy data for charts
        const urlActivityData = {
            labels: @Html.Raw(Json.Serialize(Model.Select(a => a.Url).Distinct())),
            datasets: [{
                label: 'Number of Activities',
                data: @Html.Raw(Json.Serialize(Model.GroupBy(a => a.Url).Select(g => g.Count()))),
                backgroundColor: 'rgba(75, 192, 192, 0.6)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        };

        const userActivityData = {
            labels: @Html.Raw(Json.Serialize(Model.Select(a => a.Username).Distinct())),
            datasets: [{
                label: 'Number of Activities',
                data: @Html.Raw(Json.Serialize(Model.GroupBy(a => a.Username).Select(g => g.Count()))),
                backgroundColor: 'rgba(153, 102, 255, 0.6)',
                borderColor: 'rgba(153, 102, 255, 1)',
                borderWidth: 1
            }]
        };

        // Initialize charts
        const urlActivityCtx = document.getElementById('urlActivityChart').getContext('2d');
        const userActivityCtx = document.getElementById('userActivityChart').getContext('2d');

        new Chart(urlActivityCtx, {
            type: 'bar',
            data: urlActivityData,
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        new Chart(userActivityCtx, {
            type: 'bar',
            data: userActivityData,
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Filter function
        function applyFilters() {
            const username = document.getElementById('username-filter').value.toLowerCase();
            const ip = document.getElementById('ip-filter').value.toLowerCase();
            const url = document.getElementById('url-filter').value.toLowerCase();

            document.querySelectorAll('tbody tr').forEach(row => {
                const usernameMatch = row.cells[1].innerText.toLowerCase().includes(username);
                const ipMatch = row.cells[2].innerText.toLowerCase().includes(ip);
                const urlMatch = row.cells[3].innerText.toLowerCase().includes(url);

                row.style.display = (usernameMatch && ipMatch && urlMatch) ? '' : 'none';
            });
        }

        // Reset filters
        function resetFilters() {
            document.getElementById('username-filter').value = '';
            document.getElementById('ip-filter').value = '';
            document.getElementById('url-filter').value = '';
            document.querySelectorAll('tbody tr').forEach(row => row.style.display = '');
        }
    </script>
}
